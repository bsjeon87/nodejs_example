Node js example

npm -> https://www.npmjs.com/ 에 있는 module들의 download를 진행가능.
이후 해당 사이트에 자신이 만든 모듈도 올릴 수 있음.

package.json -> some basic information about the app .( dependency등.)
                모든 node 어플리케이션은 스탠다드로 package.json을 가져야함.
         (npm init 수행 시 자동으로 생성 ( default 사용 npm init --yes).)


npm i ~~~ --save ( package.json에 dependency 추가: 현재 default --save가
적용되고있어 안적어도됨.)

npm 예전버전은
package install시 해당 package만 node_module밑에 설치하고
dependecy에 대해서는 package 폴더 밑에 dependency(package)를
설치했었음.
이럴 경우 여러 패키지에서 사용하는 dependecy(package)의 경우
중복해서 설치되고, 윈도우의 경우 경로에 대한 제한이 걸려있어
문제가 발생하기도 했었음.
최근 npm의 경우 package설치에 필요한 모든 module dependency(package)도
package와 동일하게 node_module밑에 설치함.

만약 특정 package설치 시 필요한 특정 dependency버전과
기존 node_module에 설치된 package의 버전이 다른 경우에는
설치할 package 밑에 dependcy를 설치함.


node_modules 폴더의 경우 사이즈가 크므로,
메일로 프로젝트 전달시 삭제함.
package.json 파일만 있어도, npm -i 를 하게되면
동일한 node_modules 폴더가 생성됨
( ex: git의 경우 .gitignore 파일을 만들고 node_modules/ 를 입력해 넣고
사용하면됨 )

module versioning(semantic versioning)
Major( 기존 버전을 사용하는 application에 문제를 주는 기능 추가 경우).
Minor( 기능 추가 하지만 API는 변경되지 않음. ).
 patch(  버그 발생 시 버그 수정)
// ^major.minor.patch 에서 ^는 major만 중요함. 나중에 설치시
// major는 고정이고 minor. patch는 업데이트 될수 있음. ==> 4.x.x
// ~major.minor.patch == > 1.8.x (minor까지 봄)
// 실제 설치되어 있는 버전확인을 위해서는 node_modules 폴더에
//해당 패키지의 package.json의 version을 확인하면 확인가능.
// 혹은 npm list를 입력하여 확인.( npm list --depth=0 : 설치한 패키지만 확인원하는 경우)


npm view ( ex npm view mongoose )
=> 모듈의 package.json 확인가능함. ( 
       ex; dependcy : npm view mongoose dependences        
 )

 module downgrade or change version (특정버전으로 이동가능.)
 npm i mongoose@2.4.2

 npm outdated => remote 저장소에 다운가능 버전등의 정보 확인가능.
 npm update => package.json에 있는 정보바탕으로 다운가능버전이 있으면 업데이트

개발중일때만 사용하는 dependency 사용가능함.
npm i jshint --save-dev (실제 설치됨 node_modules 밑에)
차이는 오직 package.json내에 devDependencies에서 구별됨.

npm un mongoose -> 삭제 / package.json , node_modules 모두에서 삭제됨

global 모듈 설치( 특정 폴더/특정 프로젝트에 설치하지 않고 전체에 적용)
ex: npm i -g react-create  (명령으로 만들어 어느 폴더에서나 사용가능.)
                           (어느폴더에서나  create-react-app 패키지 실행가능)



배포(npm module)
$ npm adduser
Username: bsjeon
Password:                  //// ZXLKQWpo4043
Email: (this IS public) jbsgo@naver.com
Logged in as bsjeon on https://registry.npmjs.org/.

$ npm login
Username: bsjeon
Password:
Email: (this IS public) jbsgo@naver.com
Logged in as bsjeon on https://registry.npmjs.org/.

$ npm publish  //에러발생시 (package json의 name을 unique하게 만듬.)
               //혹은 account 인증

사용 ->
npm i lion-lib-jeonbs (node_module밑에 이전에 deploy진행한 코드와
메타데이터가 포함됨. 이 외에도 deploy시 자동 추가된 내용도 포함됨)

모듈 업데이트시
package.json의 version업데이트 후(수동 package.json 혹은 npm version minor사용) publish

nodemon
=> node i nodemon
=> node_modules/nodemon/bin/nodemon.js index.js (자동실행.)

node app에서 port를 환경변수에서 가지고 오게 설정
=> 환경변수는 mac/linux: export PORT=5000 , set PORT=5000